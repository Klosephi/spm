/*
 * generated by Xtext
 */
package org.pklose.simplespec.serializer;

import com.google.inject.Inject;
import com.google.inject.Provider;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.serializer.acceptor.ISemanticSequenceAcceptor;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.diagnostic.ISemanticSequencerDiagnosticProvider;
import org.eclipse.xtext.serializer.diagnostic.ISerializationDiagnostic.Acceptor;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.GenericSequencer;
import org.eclipse.xtext.serializer.sequencer.ISemanticNodeProvider.INodesForEObjectProvider;
import org.eclipse.xtext.serializer.sequencer.ISemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.pklose.simplespec.services.SimplespecGrammarAccess;
import org.pklose.simplespec.simplespec.Association;
import org.pklose.simplespec.simplespec.Diagram;
import org.pklose.simplespec.simplespec.Domain;
import org.pklose.simplespec.simplespec.Entity;
import org.pklose.simplespec.simplespec.EnumDeclaration;
import org.pklose.simplespec.simplespec.Field;
import org.pklose.simplespec.simplespec.Import;
import org.pklose.simplespec.simplespec.Include;
import org.pklose.simplespec.simplespec.Literal;
import org.pklose.simplespec.simplespec.Model;
import org.pklose.simplespec.simplespec.SimplespecPackage;

@SuppressWarnings("all")
public class SimplespecSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private SimplespecGrammarAccess grammarAccess;
	
	@Override
	public void createSequence(EObject context, EObject semanticObject) {
		if(semanticObject.eClass().getEPackage() == SimplespecPackage.eINSTANCE) switch(semanticObject.eClass().getClassifierID()) {
			case SimplespecPackage.ASSOCIATION:
				sequence_Association(context, (Association) semanticObject); 
				return; 
			case SimplespecPackage.DIAGRAM:
				sequence_Diagram(context, (Diagram) semanticObject); 
				return; 
			case SimplespecPackage.DOMAIN:
				sequence_Domain(context, (Domain) semanticObject); 
				return; 
			case SimplespecPackage.ENTITY:
				sequence_Entity(context, (Entity) semanticObject); 
				return; 
			case SimplespecPackage.ENUM:
				sequence_Enum(context, (org.pklose.simplespec.simplespec.Enum) semanticObject); 
				return; 
			case SimplespecPackage.ENUM_DECLARATION:
				sequence_EnumDeclaration(context, (EnumDeclaration) semanticObject); 
				return; 
			case SimplespecPackage.FIELD:
				sequence_Field(context, (Field) semanticObject); 
				return; 
			case SimplespecPackage.IMPORT:
				sequence_Import(context, (Import) semanticObject); 
				return; 
			case SimplespecPackage.INCLUDE:
				sequence_Include(context, (Include) semanticObject); 
				return; 
			case SimplespecPackage.LITERAL:
				sequence_Literal(context, (Literal) semanticObject); 
				return; 
			case SimplespecPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			}
		if (errorAcceptor != null) errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Constraint:
	 *     (multiplicity=Multiplicty name=ID type=[Entity|FQN])
	 */
	protected void sequence_Association(EObject context, Association semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, SimplespecPackage.Literals.PROPERTY__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimplespecPackage.Literals.PROPERTY__NAME));
			if(transientValues.isValueTransient(semanticObject, SimplespecPackage.Literals.ASSOCIATION__MULTIPLICITY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimplespecPackage.Literals.ASSOCIATION__MULTIPLICITY));
			if(transientValues.isValueTransient(semanticObject, SimplespecPackage.Literals.ASSOCIATION__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimplespecPackage.Literals.ASSOCIATION__TYPE));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getAssociationAccess().getMultiplicityMultiplictyParserRuleCall_1_0(), semanticObject.getMultiplicity());
		feeder.accept(grammarAccess.getAssociationAccess().getNameIDTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getAssociationAccess().getTypeEntityFQNParserRuleCall_4_0_1(), semanticObject.getType());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (imports+=Import* name=ID includes+=Include*)
	 */
	protected void sequence_Diagram(EObject context, Diagram semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (imports+=Import* name=ID description=STRING entities+=Entity+)
	 */
	protected void sequence_Domain(EObject context, Domain semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name=ID properties+=Property*)
	 */
	protected void sequence_Entity(EObject context, Entity semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name=ID values+=ID)
	 */
	protected void sequence_EnumDeclaration(EObject context, EnumDeclaration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     type=[EnumDeclaration|ID]
	 */
	protected void sequence_Enum(EObject context, org.pklose.simplespec.simplespec.Enum semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, SimplespecPackage.Literals.ENUM__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimplespecPackage.Literals.ENUM__TYPE));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getEnumAccess().getTypeEnumDeclarationIDTerminalRuleCall_1_0_1(), semanticObject.getType());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (name=ID literal=Literal)
	 */
	protected void sequence_Field(EObject context, Field semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, SimplespecPackage.Literals.PROPERTY__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimplespecPackage.Literals.PROPERTY__NAME));
			if(transientValues.isValueTransient(semanticObject, SimplespecPackage.Literals.FIELD__LITERAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimplespecPackage.Literals.FIELD__LITERAL));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getFieldAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getFieldAccess().getLiteralLiteralParserRuleCall_3_0(), semanticObject.getLiteral());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     importedNamespace=FqnWithWildCard
	 */
	protected void sequence_Import(EObject context, Import semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, SimplespecPackage.Literals.IMPORT__IMPORTED_NAMESPACE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimplespecPackage.Literals.IMPORT__IMPORTED_NAMESPACE));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getImportAccess().getImportedNamespaceFqnWithWildCardParserRuleCall_1_0(), semanticObject.getImportedNamespace());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (entity=[Entity|FQN] fields+=[Property|FQN]*)
	 */
	protected void sequence_Include(EObject context, Include semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     {Literal}
	 */
	protected void sequence_Literal(EObject context, Literal semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     elements+=Element
	 */
	protected void sequence_Model(EObject context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
}
