/*
 * generated by Xtext
 */
package org.pklose.simplespec.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import org.pklose.simplespec.services.SimplespecGrammarAccess;

@SuppressWarnings("all")
public class SimplespecSyntacticSequencer extends AbstractSyntacticSequencer {

	protected SimplespecGrammarAccess grammarAccess;
	protected AbstractElementAlias match_EnumDeclaration___CommaKeyword_4_0_IDTerminalRuleCall_4_1__a;
	protected AbstractElementAlias match_Include___WithKeyword_2_0_LeftCurlyBracketKeyword_2_1_RightCurlyBracketKeyword_2_3__q;
	protected AbstractElementAlias match_Literal_BooleanKeyword_3_1_or_DecimalKeyword_0_1_or_GeldKeyword_1_1_or_IntKeyword_4_1_or_TextKeyword_2_1;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (SimplespecGrammarAccess) access;
		match_EnumDeclaration___CommaKeyword_4_0_IDTerminalRuleCall_4_1__a = new GroupAlias(true, true, new TokenAlias(false, false, grammarAccess.getEnumDeclarationAccess().getCommaKeyword_4_0()), new TokenAlias(false, false, grammarAccess.getEnumDeclarationAccess().getIDTerminalRuleCall_4_1()));
		match_Include___WithKeyword_2_0_LeftCurlyBracketKeyword_2_1_RightCurlyBracketKeyword_2_3__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getIncludeAccess().getWithKeyword_2_0()), new TokenAlias(false, false, grammarAccess.getIncludeAccess().getLeftCurlyBracketKeyword_2_1()), new TokenAlias(false, false, grammarAccess.getIncludeAccess().getRightCurlyBracketKeyword_2_3()));
		match_Literal_BooleanKeyword_3_1_or_DecimalKeyword_0_1_or_GeldKeyword_1_1_or_IntKeyword_4_1_or_TextKeyword_2_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getLiteralAccess().getBooleanKeyword_3_1()), new TokenAlias(false, false, grammarAccess.getLiteralAccess().getDecimalKeyword_0_1()), new TokenAlias(false, false, grammarAccess.getLiteralAccess().getGeldKeyword_1_1()), new TokenAlias(false, false, grammarAccess.getLiteralAccess().getIntKeyword_4_1()), new TokenAlias(false, false, grammarAccess.getLiteralAccess().getTextKeyword_2_1()));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if(ruleCall.getRule() == grammarAccess.getIDRule())
			return getIDToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * terminal ID  		: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	 */
	protected String getIDToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if(match_EnumDeclaration___CommaKeyword_4_0_IDTerminalRuleCall_4_1__a.equals(syntax))
				emit_EnumDeclaration___CommaKeyword_4_0_IDTerminalRuleCall_4_1__a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_Include___WithKeyword_2_0_LeftCurlyBracketKeyword_2_1_RightCurlyBracketKeyword_2_3__q.equals(syntax))
				emit_Include___WithKeyword_2_0_LeftCurlyBracketKeyword_2_1_RightCurlyBracketKeyword_2_3__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_Literal_BooleanKeyword_3_1_or_DecimalKeyword_0_1_or_GeldKeyword_1_1_or_IntKeyword_4_1_or_TextKeyword_2_1.equals(syntax))
				emit_Literal_BooleanKeyword_3_1_or_DecimalKeyword_0_1_or_GeldKeyword_1_1_or_IntKeyword_4_1_or_TextKeyword_2_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     (',' ID)*
	 *
	 * This ambiguous syntax occurs at:
	 *     values+=ID (ambiguity) '}' (rule end)
	 */
	protected void emit_EnumDeclaration___CommaKeyword_4_0_IDTerminalRuleCall_4_1__a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('with' '{' '}')?
	 *
	 * This ambiguous syntax occurs at:
	 *     entity=[Entity|FQN] (ambiguity) (rule end)
	 */
	protected void emit_Include___WithKeyword_2_0_LeftCurlyBracketKeyword_2_1_RightCurlyBracketKeyword_2_3__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'Decimal' | 'Geld' | 'Text' | 'Boolean' | 'Int'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 */
	protected void emit_Literal_BooleanKeyword_3_1_or_DecimalKeyword_0_1_or_GeldKeyword_1_1_or_IntKeyword_4_1_or_TextKeyword_2_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
